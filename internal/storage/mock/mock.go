// Code generated by MockGen. DO NOT EDIT.
// Source: storage_gofermat.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	sql "database/sql"
	handlersmodels "gofermart/internal/models/handlers_models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorageGofermart is a mock of StorageGofermart interface.
type MockStorageGofermart struct {
	ctrl     *gomock.Controller
	recorder *MockStorageGofermartMockRecorder
}

// MockStorageGofermartMockRecorder is the mock recorder for MockStorageGofermart.
type MockStorageGofermartMockRecorder struct {
	mock *MockStorageGofermart
}

// NewMockStorageGofermart creates a new mock instance.
func NewMockStorageGofermart(ctrl *gomock.Controller) *MockStorageGofermart {
	mock := &MockStorageGofermart{ctrl: ctrl}
	mock.recorder = &MockStorageGofermartMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageGofermart) EXPECT() *MockStorageGofermartMockRecorder {
	return m.recorder
}

// AddHistoryBalance mocks base method.
func (m *MockStorageGofermart) AddHistoryBalance(ctx context.Context, tx *sql.Tx, reqWithdraw handlersmodels.ReqWithdraw) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHistoryBalance", ctx, tx, reqWithdraw)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddHistoryBalance indicates an expected call of AddHistoryBalance.
func (mr *MockStorageGofermartMockRecorder) AddHistoryBalance(ctx, tx, reqWithdraw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHistoryBalance", reflect.TypeOf((*MockStorageGofermart)(nil).AddHistoryBalance), ctx, tx, reqWithdraw)
}

// AddNewOrder mocks base method.
func (m *MockStorageGofermart) AddNewOrder(ctx context.Context, tx *sql.Tx, reqOrder *handlersmodels.ReqOrder) (*handlersmodels.ReqOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewOrder", ctx, tx, reqOrder)
	ret0, _ := ret[0].(*handlersmodels.ReqOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNewOrder indicates an expected call of AddNewOrder.
func (mr *MockStorageGofermartMockRecorder) AddNewOrder(ctx, tx, reqOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewOrder", reflect.TypeOf((*MockStorageGofermart)(nil).AddNewOrder), ctx, tx, reqOrder)
}

// AddNewOrderAccrual mocks base method.
func (m *MockStorageGofermart) AddNewOrderAccrual(ctx context.Context, tx *sql.Tx, reqOrder *handlersmodels.ReqOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewOrderAccrual", ctx, tx, reqOrder)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewOrderAccrual indicates an expected call of AddNewOrderAccrual.
func (mr *MockStorageGofermartMockRecorder) AddNewOrderAccrual(ctx, tx, reqOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewOrderAccrual", reflect.TypeOf((*MockStorageGofermart)(nil).AddNewOrderAccrual), ctx, tx, reqOrder)
}

// AddNewUser mocks base method.
func (m *MockStorageGofermart) AddNewUser(ctx context.Context, tx *sql.Tx, reqRegister *handlersmodels.RequestRegister) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewUser", ctx, tx, reqRegister)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNewUser indicates an expected call of AddNewUser.
func (mr *MockStorageGofermartMockRecorder) AddNewUser(ctx, tx, reqRegister interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewUser", reflect.TypeOf((*MockStorageGofermart)(nil).AddNewUser), ctx, tx, reqRegister)
}

// AddNewUserBalance mocks base method.
func (m *MockStorageGofermart) AddNewUserBalance(ctx context.Context, tx *sql.Tx, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewUserBalance", ctx, tx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewUserBalance indicates an expected call of AddNewUserBalance.
func (mr *MockStorageGofermartMockRecorder) AddNewUserBalance(ctx, tx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewUserBalance", reflect.TypeOf((*MockStorageGofermart)(nil).AddNewUserBalance), ctx, tx, userID)
}

// CheckOrderNumber mocks base method.
func (m *MockStorageGofermart) CheckOrderNumber(ctx context.Context, tx *sql.Tx, orderNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOrderNumber", ctx, tx, orderNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckOrderNumber indicates an expected call of CheckOrderNumber.
func (mr *MockStorageGofermartMockRecorder) CheckOrderNumber(ctx, tx, orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOrderNumber", reflect.TypeOf((*MockStorageGofermart)(nil).CheckOrderNumber), ctx, tx, orderNumber)
}

// CheckUserLoginData mocks base method.
func (m *MockStorageGofermart) CheckUserLoginData(reqLogin *handlersmodels.RequestLogin) (*handlersmodels.ResultLogin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserLoginData", reqLogin)
	ret0, _ := ret[0].(*handlersmodels.ResultLogin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserLoginData indicates an expected call of CheckUserLoginData.
func (mr *MockStorageGofermartMockRecorder) CheckUserLoginData(reqLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserLoginData", reflect.TypeOf((*MockStorageGofermart)(nil).CheckUserLoginData), reqLogin)
}

// CloseDB mocks base method.
func (m *MockStorageGofermart) CloseDB() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseDB")
}

// CloseDB indicates an expected call of CloseDB.
func (mr *MockStorageGofermartMockRecorder) CloseDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseDB", reflect.TypeOf((*MockStorageGofermart)(nil).CloseDB))
}

// GetAllHistoryBalance mocks base method.
func (m *MockStorageGofermart) GetAllHistoryBalance(ctx context.Context, userID int) ([]handlersmodels.RespWithdrawalsHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllHistoryBalance", ctx, userID)
	ret0, _ := ret[0].([]handlersmodels.RespWithdrawalsHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllHistoryBalance indicates an expected call of GetAllHistoryBalance.
func (mr *MockStorageGofermartMockRecorder) GetAllHistoryBalance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllHistoryBalance", reflect.TypeOf((*MockStorageGofermart)(nil).GetAllHistoryBalance), ctx, userID)
}

// GetAllUserOrders mocks base method.
func (m *MockStorageGofermart) GetAllUserOrders(ctx context.Context, userID int) ([]handlersmodels.RespGetOrders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserOrders", ctx, userID)
	ret0, _ := ret[0].([]handlersmodels.RespGetOrders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserOrders indicates an expected call of GetAllUserOrders.
func (mr *MockStorageGofermartMockRecorder) GetAllUserOrders(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserOrders", reflect.TypeOf((*MockStorageGofermart)(nil).GetAllUserOrders), ctx, userID)
}

// GetUserBalance mocks base method.
func (m *MockStorageGofermart) GetUserBalance(ctx context.Context) (*handlersmodels.RespUserBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", ctx)
	ret0, _ := ret[0].(*handlersmodels.RespUserBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockStorageGofermartMockRecorder) GetUserBalance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockStorageGofermart)(nil).GetUserBalance), ctx)
}

// InTransaction mocks base method.
func (m *MockStorageGofermart) InTransaction(parentsCtx context.Context, f func(context.Context, *sql.Tx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InTransaction", parentsCtx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// InTransaction indicates an expected call of InTransaction.
func (mr *MockStorageGofermartMockRecorder) InTransaction(parentsCtx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InTransaction", reflect.TypeOf((*MockStorageGofermart)(nil).InTransaction), parentsCtx, f)
}

// WithdrawBalance mocks base method.
func (m *MockStorageGofermart) WithdrawBalance(ctx context.Context, tx *sql.Tx, reqWithdraw handlersmodels.ReqWithdraw) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawBalance", ctx, tx, reqWithdraw)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithdrawBalance indicates an expected call of WithdrawBalance.
func (mr *MockStorageGofermartMockRecorder) WithdrawBalance(ctx, tx, reqWithdraw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawBalance", reflect.TypeOf((*MockStorageGofermart)(nil).WithdrawBalance), ctx, tx, reqWithdraw)
}
