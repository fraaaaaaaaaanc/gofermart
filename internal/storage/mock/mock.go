// Code generated by MockGen. DO NOT EDIT.
// Source: C:/Users/frant/go/go1.21.0/bin/pkg/mod/github.com/fraaaaaaaaaanc/gofermart/internal/storage/storage_gofermat.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	sql "database/sql"
	handlers_models "gofermart/internal/models/handlers_models"
	work_with_api_models "gofermart/internal/models/work_with_api_models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorageMock is a mock of StorageMock interface.
type MockStorageMock struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockMockRecorder
}

// MockStorageMockMockRecorder is the mock recorder for MockStorageMock.
type MockStorageMockMockRecorder struct {
	mock *MockStorageMock
}

// NewMockStorageMock creates a new mock instance.
func NewMockStorageMock(ctrl *gomock.Controller) *MockStorageMock {
	mock := &MockStorageMock{ctrl: ctrl}
	mock.recorder = &MockStorageMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageMock) EXPECT() *MockStorageMockMockRecorder {
	return m.recorder
}

// AddNewOrder mocks base method.
func (m *MockStorageMock) AddNewOrder(reqOrder *handlers_models.ReqOrder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewOrder", reqOrder)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewOrder indicates an expected call of AddNewOrder.
func (mr *MockStorageMockMockRecorder) AddNewOrder(reqOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewOrder", reflect.TypeOf((*MockStorageMock)(nil).AddNewOrder), reqOrder)
}

// AddNewUser mocks base method.
func (m *MockStorageMock) AddNewUser(reqChanelRegister *handlers_models.RequestRegister) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewUser", reqChanelRegister)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNewUser indicates an expected call of AddNewUser.
func (mr *MockStorageMockMockRecorder) AddNewUser(reqChanelRegister interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewUser", reflect.TypeOf((*MockStorageMock)(nil).AddNewUser), reqChanelRegister)
}

// CheckOrderNumber mocks base method.
func (m *MockStorageMock) CheckOrderNumber(ctx context.Context, orderNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOrderNumber", ctx, orderNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckOrderNumber indicates an expected call of CheckOrderNumber.
func (mr *MockStorageMockMockRecorder) CheckOrderNumber(ctx, orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOrderNumber", reflect.TypeOf((*MockStorageMock)(nil).CheckOrderNumber), ctx, orderNumber)
}

// CheckUserLoginData mocks base method.
func (m *MockStorageMock) CheckUserLoginData(reqLogin *handlers_models.RequestLogin) (*handlers_models.ResultLogin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserLoginData", reqLogin)
	ret0, _ := ret[0].(*handlers_models.ResultLogin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserLoginData indicates an expected call of CheckUserLoginData.
func (mr *MockStorageMockMockRecorder) CheckUserLoginData(reqLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserLoginData", reflect.TypeOf((*MockStorageMock)(nil).CheckUserLoginData), reqLogin)
}

// CloseDB mocks base method.
func (m *MockStorageMock) CloseDB() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseDB")
}

// CloseDB indicates an expected call of CloseDB.
func (mr *MockStorageMockMockRecorder) CloseDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseDB", reflect.TypeOf((*MockStorageMock)(nil).CloseDB))
}

// DeleteOrders mocks base method.
func (m *MockStorageMock) DeleteOrders(tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrders", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrders indicates an expected call of DeleteOrders.
func (mr *MockStorageMockMockRecorder) DeleteOrders(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrders", reflect.TypeOf((*MockStorageMock)(nil).DeleteOrders), tx)
}

// GetAllHistoryBalance mocks base method.
func (m *MockStorageMock) GetAllHistoryBalance(userID int) ([]handlers_models.RespWithdrawalsHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllHistoryBalance", userID)
	ret0, _ := ret[0].([]handlers_models.RespWithdrawalsHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllHistoryBalance indicates an expected call of GetAllHistoryBalance.
func (mr *MockStorageMockMockRecorder) GetAllHistoryBalance(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllHistoryBalance", reflect.TypeOf((*MockStorageMock)(nil).GetAllHistoryBalance), userID)
}

// GetAllUnAccrualOrders mocks base method.
func (m *MockStorageMock) GetAllUnAccrualOrders() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUnAccrualOrders")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUnAccrualOrders indicates an expected call of GetAllUnAccrualOrders.
func (mr *MockStorageMockMockRecorder) GetAllUnAccrualOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUnAccrualOrders", reflect.TypeOf((*MockStorageMock)(nil).GetAllUnAccrualOrders))
}

// GetAllUserOrders mocks base method.
func (m *MockStorageMock) GetAllUserOrders(userID int) ([]handlers_models.RespGetOrders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserOrders", userID)
	ret0, _ := ret[0].([]handlers_models.RespGetOrders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserOrders indicates an expected call of GetAllUserOrders.
func (mr *MockStorageMockMockRecorder) GetAllUserOrders(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserOrders", reflect.TypeOf((*MockStorageMock)(nil).GetAllUserOrders), userID)
}

// GetCalculatedUsers mocks base method.
func (m *MockStorageMock) GetCalculatedUsers() ([]work_with_api_models.UsersOrdersAccrual, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCalculatedUsers")
	ret0, _ := ret[0].([]work_with_api_models.UsersOrdersAccrual)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCalculatedUsers indicates an expected call of GetCalculatedUsers.
func (mr *MockStorageMockMockRecorder) GetCalculatedUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCalculatedUsers", reflect.TypeOf((*MockStorageMock)(nil).GetCalculatedUsers))
}

// GetUserBalance mocks base method.
func (m *MockStorageMock) GetUserBalance(ctx context.Context) (*handlers_models.RespUserBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", ctx)
	ret0, _ := ret[0].(*handlers_models.RespUserBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockStorageMockMockRecorder) GetUserBalance(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockStorageMock)(nil).GetUserBalance), ctx)
}

// UpdateBalance mocks base method.
func (m *MockStorageMock) UpdateBalance(usersOrdersAccrualList []work_with_api_models.UsersOrdersAccrual) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", usersOrdersAccrualList)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockStorageMockMockRecorder) UpdateBalance(usersOrdersAccrualList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockStorageMock)(nil).UpdateBalance), usersOrdersAccrualList)
}

// UpdateOrderStatus mocks base method.
func (m *MockStorageMock) UpdateOrderStatus(orderNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", orderNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockStorageMockMockRecorder) UpdateOrderStatus(orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockStorageMock)(nil).UpdateOrderStatus), orderNumber)
}

// UpdateOrdersStatusAndAccrual mocks base method.
func (m *MockStorageMock) UpdateOrdersStatusAndAccrual(resGetOrdersAccrual *work_with_api_models.ResGetOrderAccrual) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrdersStatusAndAccrual", resGetOrdersAccrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrdersStatusAndAccrual indicates an expected call of UpdateOrdersStatusAndAccrual.
func (mr *MockStorageMockMockRecorder) UpdateOrdersStatusAndAccrual(resGetOrdersAccrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrdersStatusAndAccrual", reflect.TypeOf((*MockStorageMock)(nil).UpdateOrdersStatusAndAccrual), resGetOrdersAccrual)
}

// WithdrawBalance mocks base method.
func (m *MockStorageMock) WithdrawBalance(reqWithdraw handlers_models.ReqWithdraw) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawBalance", reqWithdraw)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithdrawBalance indicates an expected call of WithdrawBalance.
func (mr *MockStorageMockMockRecorder) WithdrawBalance(reqWithdraw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawBalance", reflect.TypeOf((*MockStorageMock)(nil).WithdrawBalance), reqWithdraw)
}
